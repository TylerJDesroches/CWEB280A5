<?php

use DB3\Model;
use DB3\Type;

/**
 * Stores a comment that is associated with an image.
 *
 * @version 1.0
 * @author cst243
 */
class Comment extends Model
{
    // ATTRIBUTES

    // the primaary key that will be generated by the database
    public $commentId;
    // The actual text within the comment
    public $description;
    // How many upvotes vs downvotes the comment has
    public $ranking;
    // The id of the image that this comment is on
    public $imageId;
    // the id of the member that made the comment
    public $memberId;

    // VALIDATOR FUNCTIONS

    /**
     * A validator function to make sure the primary
     * key is either empty, (not yet been added to database)
     * or is an integer. (has been added to the database)
     * @return boolean
     */
    public function validate_pk()
    {
        return $this->checkProperty('commentId', empty($this->commentId) || is_int($this->commentId), '%s must be a number');
    }
    /**
     * A validator function to make sure the description
     * is between 5 and 144 characters.
     * @return boolean
     */
    public function validate_description()
    {
        return $this->checkProperty('description',!empty($this->description) &&
                ( strlen($this->description) >= 5 && strlen($this->description) ) <= 144,
                'Comment %s must be between 5 and 144 characters');
    }
    /**
     * A validator conflict to make sure the ranking is an integer
     * @return boolean
     */
    public function validate_ranking()
    {
        return $this->checkProperty('ranking', is_int($this->ranking), '%s must be an integer');
    }
    /**
     * A validator function to make sure
     * the imageId is empty and is an integer.
     * @return boolean
     */
    public function validate_imageId()
    {
        return $this->checkProperty('commentId', !empty($this->imageId) && is_int($this->imageId), '%s must be a number');
    }
    /**
     * A validator function to make sure the
     * memberId is not empty and is an integer.
     * @return boolean
     */
    public function validate_memberId()
    {
        return $this->checkProperty('memberId', !empty($this->memberId) && is_int($this->memberId), '%s must be a number');

    }
    // CONSTRUCTOR

    /**
     * Defines columns for the comment class
     * Sets labels for the comment class
     */
    public function __construct()
    {
        $this->defineColumn('commentId', Type::INT, null, false, true, true );
        $this->defineColumn('description', Type::VRC, 144, false);
        $this->defineColumn('ranking', Type::INT, null, false);
        $this->defineColumn('imageId', Type::INT, null, false);
        $this->defineColumn('memberId', Type::INT, null, false);

        $this->setLabel('commentId', 'ID');
        $this->setLabel('description', "Description");
        $this->setLabel('ranking', 'Rank');
    }
}